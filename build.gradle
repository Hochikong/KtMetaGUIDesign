apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'
apply from: "IO.gradle"

description = 'KtMeta Swing GUI Design Project'
group = 'io.github.hochikong'

mainClassName = 'io.github.hochikong.ktmeta.swingui.KtmetaMainFrame'

repositories {
    jcenter()
}

dependencies {
    implementation 'com.formdev:flatlaf:0.41'
    implementation 'com.formdev:flatlaf-intellij-themes:0.41'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'io.vertx:vertx-core:3.9.4'
    implementation 'org.bidib.org.oxbow:swingbits:1.2.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.1'
    testImplementation 'junit:junit:4.13'

}

// include all resources files
processResources {
    from('src/main') {
        include '*.*'
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'io.github.hochikong.ktmeta.swingui.KtmetaMainFrame'
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

startScripts { 

    def startScriptDir = outputDir.getAbsolutePath()
    def winStartScript = startScriptDir + "/" + applicationName + ".bat"
    def winStartScriptCopy = startScriptDir + "/" + applicationName + "WithConsole.bat"
    def overwriteExistingFile = true
    copyFile(winStartScript, winStartScriptCopy, overwriteExistingFile)

    modifyFile(winStartScript) {
        // javaw.exe doesn't have a console
        if(it.contains("java.exe")){
            return it.replace("java.exe", "javaw.exe")
        }
        // Command that launches the app
        else if(it.startsWith("\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%")){
            return "start \"\" /b " + it
        }
        // Leave the line unchanged
        else{
            return it
        }
    }
}